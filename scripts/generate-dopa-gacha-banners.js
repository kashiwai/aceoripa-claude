const fs = require('fs').promises;
const path = require('path');

// DOPAÈ¢®„Ç¨„ÉÅ„É£„Éê„Éä„Éº5Á®ÆÈ°ûÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà

const bannerConfigs = [
  {
    id: 'pokemon-151-oripa',
    title: '„Éù„Ç±„É¢„É≥„Ç´„Éº„Éâ151„Ç™„É™„Éë',
    subtitle: '„É™„Ç∂„Éº„Éâ„É≥ex SARÁ¢∫ÁéáUPÔºÅ',
    type: 'dopa-pokemon',
    filename: 'pokemon-151-gacha-banner.png'
  },
  {
    id: 'onepiece-premium',
    title: '„ÉØ„É≥„Éî„Éº„ÇπÈ†Ç‰∏äÊ±∫Êà¶',
    subtitle: '„É´„Éï„Ç£SECÁ¢∫ÂÆö„Éë„ÉÉ„ÇØ',
    type: 'dopa-main',
    filename: 'onepiece-premium-banner.png'
  },
  {
    id: 'yugioh-rarity',
    title: 'ÈÅäÊàØÁéã„É¨„Ç¢„Ç≥„É¨',
    subtitle: '„Éñ„É´„Éº„Ç¢„Ç§„Ç∫Á©∂Ê•µÁ´ú',
    type: 'dopa-campaign',
    filename: 'yugioh-rarity-banner.png'
  },
  {
    id: 'limited-campaign',
    title: 'ÊúüÈñìÈôêÂÆö„Ç≠„É£„É≥„Éö„Éº„É≥',
    subtitle: 'ÂÖ®ÂïÜÂìÅ50%OFF‰∏≠',
    type: 'dopa-campaign',
    filename: 'limited-campaign-banner.png'
  },
  {
    id: 'sns-winner-report',
    title: 'Â§ßÂΩì„Åü„ÇäÂ†±ÂëäÁ∂öÂá∫',
    subtitle: 'SNSÊäïÁ®ø„Åß„Åï„Çâ„Å´„ÅäÂæó',
    type: 'dopa-winner',
    filename: 'sns-winner-banner.png'
  }
];

async function generateDopaBanner(config) {
  console.log(`üé® ÁîüÊàê‰∏≠: ${config.title}`);
  
  try {
    // Next.js API„Çí‰ΩøÁî®„Åó„Å¶„Éê„Éä„ÉºÁîüÊàê
    const response = await fetch('http://localhost:9012/api/generate-banner-imagen4', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        type: config.type,
        title: config.title,
        subtitle: config.subtitle,
        style: 'premium',
        dimensions: '16:9'
      }),
    });

    if (!response.ok) {
      console.error(`‚ùå API „Ç®„É©„Éº: ${response.status}`);
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éê„Éº„Çí‰ΩøÁî®
      return await generateWithImageServer(config);
    }

    const data = await response.json();
    
    if (data.success && data.imageUrl) {
      console.log(`‚úÖ ÊàêÂäü: ${config.title}`);
      console.log(`   „Ç®„É≥„Ç∏„É≥: ${data.engine}`);
      console.log(`   URL: ${data.imageUrl}`);
      
      return {
        ...config,
        imageUrl: data.imageUrl,
        engine: data.engine,
        metadata: data.metadata
      };
    } else {
      throw new Error(data.error || '„Éê„Éä„ÉºÁîüÊàêÂ§±Êïó');
    }
    
  } catch (error) {
    console.error(`‚ùå „Ç®„É©„Éº (${config.title}):`, error.message);
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÁîªÂÉèÁîüÊàê„Çµ„Éº„Éê„Éº„Çí‰ΩøÁî®
    return await generateWithImageServer(config);
  }
}

async function generateWithImageServer(config) {
  console.log(`üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ (${config.title}): ÁîªÂÉè„Çµ„Éº„Éê„Éº‰ΩøÁî®`);
  
  try {
    const response = await fetch('http://localhost:9015/generate-banner', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        type: `dopa-${config.type.replace('dopa-', '')}`,
        title: config.title,
        subtitle: config.subtitle,
        style: 'premium',
        width: 800,
        height: 450
      }),
    });

    const data = await response.json();
    
    if (data.success && data.imageUrl) {
      console.log(`‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊàêÂäü: ${config.title}`);
      return {
        ...config,
        imageUrl: data.imageUrl,
        engine: 'canvas-server',
        fallback: true
      };
    } else {
      throw new Error('ÁîªÂÉè„Çµ„Éº„Éê„Éº„Ç®„É©„Éº');
    }
    
  } catch (error) {
    console.error(`‚ùå „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç®„É©„Éº (${config.title}):`, error.message);
    
    // ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
    return {
      ...config,
      imageUrl: `/api/placeholder/800/450?text=${encodeURIComponent(config.title)}`,
      engine: 'placeholder',
      fallback: true,
      error: error.message
    };
  }
}

async function saveGeneratedBanners(results) {
  console.log('\nüìÅ „Éê„Éä„Éº‰øùÂ≠ò‰∏≠...');
  
  const publicDir = path.join(process.cwd(), 'public', 'images', 'gacha-banners');
  
  try {
    // „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
    await fs.mkdir(publicDir, { recursive: true });
    
    // ÁµêÊûú„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    const resultData = {
      generated_at: new Date().toISOString(),
      banners: results,
      summary: {
        total: results.length,
        success: results.filter(r => !r.error).length,
        fallback: results.filter(r => r.fallback).length,
        error: results.filter(r => r.error).length
      }
    };
    
    const jsonPath = path.join(publicDir, 'banner-generation-results.json');
    await fs.writeFile(jsonPath, JSON.stringify(resultData, null, 2));
    
    console.log(`‚úÖ ÁµêÊûú‰øùÂ≠ò: ${jsonPath}`);
    
    // HTML„Éó„É¨„Éì„É•„Éº„Éö„Éº„Ç∏‰ΩúÊàê
    const htmlContent = generatePreviewHTML(results);
    const htmlPath = path.join(publicDir, 'preview.html');
    await fs.writeFile(htmlPath, htmlContent);
    
    console.log(`‚úÖ „Éó„É¨„Éì„É•„Éº‰ΩúÊàê: ${htmlPath}`);
    
    return resultData;
    
  } catch (error) {
    console.error('‚ùå ‰øùÂ≠ò„Ç®„É©„Éº:', error.message);
    return null;
  }
}

function generatePreviewHTML(results) {
  const bannerHTML = results.map(result => `
    <div class="banner-card">
      <h3>${result.title}</h3>
      <p class="subtitle">${result.subtitle}</p>
      <div class="banner-image">
        <img src="${result.imageUrl}" alt="${result.title}" onerror="this.src='/api/placeholder/800/450?text=Error'">
        <div class="engine-badge">${result.engine}</div>
        ${result.fallback ? '<div class="fallback-badge">„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ</div>' : ''}
      </div>
      <div class="details">
        <p><strong>„Çø„Ç§„Éó:</strong> ${result.type}</p>
        <p><strong>„Éï„Ç°„Ç§„É´:</strong> ${result.filename}</p>
        ${result.metadata ? `<p><strong>ÂìÅË≥™:</strong> ${result.metadata.quality}</p>` : ''}
        ${result.error ? `<p class="error"><strong>„Ç®„É©„Éº:</strong> ${result.error}</p>` : ''}
      </div>
    </div>
  `).join('');

  return `
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DOPAÈ¢®„Ç¨„ÉÅ„É£„Éê„Éä„Éº5Á®ÆÈ°û - „Éó„É¨„Éì„É•„Éº</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Noto Sans JP', sans-serif; 
            background: linear-gradient(135deg, #FF0033, #FF6B6B);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        }
        h1 { 
            text-align: center; 
            color: #FF0033; 
            margin-bottom: 40px;
            font-size: 2.5rem;
            font-weight: 900;
        }
        .stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 40px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
        }
        .stat-item {
            text-align: center;
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #FF0033;
        }
        .banner-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); 
            gap: 30px; 
        }
        .banner-card {
            border: 3px solid #FF0033;
            border-radius: 15px;
            padding: 20px;
            background: white;
            box-shadow: 0 10px 30px rgba(255,0,51,0.1);
            transition: transform 0.3s ease;
        }
        .banner-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(255,0,51,0.2);
        }
        .banner-card h3 {
            color: #FF0033;
            margin-bottom: 8px;
            font-size: 1.3rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 15px;
            font-weight: 500;
        }
        .banner-image {
            position: relative;
            margin-bottom: 15px;
            border-radius: 10px;
            overflow: hidden;
        }
        .banner-image img {
            width: 100%;
            height: auto;
            display: block;
            border-radius: 10px;
        }
        .engine-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        .fallback-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255,193,7,0.9);
            color: black;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        .details p {
            margin-bottom: 5px;
            font-size: 0.9rem;
        }
        .error {
            color: #dc3545;
            font-weight: bold;
        }
        .timestamp {
            text-align: center;
            margin-top: 40px;
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ DOPAÈ¢®„Ç¨„ÉÅ„É£„Éê„Éä„Éº5Á®ÆÈ°û</h1>
        
        <div class="stats">
            <div class="stat-item">
                <div class="stat-number">${results.length}</div>
                <div>Á∑èÊï∞</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${results.filter(r => !r.error).length}</div>
                <div>ÊàêÂäü</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${results.filter(r => r.fallback).length}</div>
                <div>„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${results.filter(r => r.error).length}</div>
                <div>„Ç®„É©„Éº</div>
            </div>
        </div>
        
        <div class="banner-grid">
            ${bannerHTML}
        </div>
        
        <div class="timestamp">
            ÁîüÊàêÊó•ÊôÇ: ${new Date().toLocaleString('ja-JP')}
        </div>
    </div>
</body>
</html>`;
}

async function main() {
  console.log('üöÄ DOPAÈ¢®„Ç¨„ÉÅ„É£„Éê„Éä„Éº5Á®ÆÈ°ûÁîüÊàêÈñãÂßã\n');
  
  const results = [];
  
  // ÂêÑ„Éê„Éä„Éº„ÇíÈ†ÜÊ¨°ÁîüÊàê
  for (const config of bannerConfigs) {
    const result = await generateDopaBanner(config);
    results.push(result);
    
    // ÁîüÊàêÈñìÈöî„ÇíÁ©∫„Åë„ÇãÔºàAPIÂà∂ÈôêÂØæÁ≠ñÔºâ
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä ÁîüÊàêÁµêÊûú„Çµ„Éû„É™„Éº:');
  console.log(`   Á∑èÊï∞: ${results.length}`);
  console.log(`   ÊàêÂäü: ${results.filter(r => !r.error).length}`);
  console.log(`   „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ${results.filter(r => r.fallback).length}`);
  console.log(`   „Ç®„É©„Éº: ${results.filter(r => r.error).length}`);
  
  // ÁµêÊûú„Çí‰øùÂ≠ò
  const savedData = await saveGeneratedBanners(results);
  
  if (savedData) {
    console.log('\nüéâ DOPAÈ¢®„Ç¨„ÉÅ„É£„Éê„Éä„Éº5Á®ÆÈ°ûÁîüÊàêÂÆå‰∫ÜÔºÅ');
    console.log('üìÅ ‰øùÂ≠òÂ†¥ÊâÄ: /public/images/gacha-banners/');
    console.log('üåê „Éó„É¨„Éì„É•„Éº: http://localhost:9012/images/gacha-banners/preview.html');
  }
  
  return results;
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { generateDopaBanner, bannerConfigs };